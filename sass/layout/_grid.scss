.row{
  /* max-width means if we have enough available space
    then it has the width we have specified
    If the viewport is smaller then it will sinmply fill 100% of the available space
  */
  max-width: $grid-width;
  // background-color: #eee;
  /*   to center the row 
      it will center a block element within another block-element
      margin of tp and bottom is 0 keft and right is auto
      wit auto the browser will figure out the left and right margin and it will be the same
  */
  margin: 0 auto;
 
  /* we select everything except the last-child (last row) */
  &:not(:last-child){
    margin-bottom: $gutter-vertical;
  }
  //.row::after {}
  @include clearfix;
  //attribute selector 
  // select all classes that contains "col-" [class*="col-"]
  // select all classes that ends with "col-" [class$="col-"]

  // select all classes that starts with "col-"
  [class^="col-"] {
    // background-color: orangered;
    float: left;

    &:not(:last-child){
      margin-right: $gutter-horizontal;

  }
  }
  .col-1-of-2{
    /*** size of one grid element: (100% of one row - the gutter) / 2  **/
    width: calc((100% - #{$gutter-horizontal})/2);
   
  }
  .col-1-of-3 {
    width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
    
  }
  .col-2-of-3 {
    width: calc( 2*((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
    
  }
  .col-1-of-4 {
    width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
    
  }
  .col-2-of-4 {
    width: calc(2*((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
    
  }
  .col-3-of-4 {
    width: calc(3*((100% - 3 * #{$gutter-horizontal}) / 4) + 2 * #{$gutter-horizontal});
    
  }


}
